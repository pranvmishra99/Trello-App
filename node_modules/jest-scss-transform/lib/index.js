"use strict";

/**
 * scssTransform.js
 * @fileOverview A Jest transformer turning scss imports into a map of
 * their exported variable to the string literal values of those variables.
 *
 * @example
 *
 * // input (contents of .scss file)
 * $primaryColor: #0000FF;
 * $secondaryColor: #FF0000;
 * :export {
 *   primary: $primaryColor;
 *   secondary: $secondaryColor;
 * }
 *
 * // output (js object)
 * { primary: '$primaryColor', secondary: '$secondaryColor' }
 */
var _require = require('./helpers'),
    _getCacheKey = _require.getCacheKey,
    getExported = _require.getExported,
    getLines = _require.getLines,
    getStrippedSource = _require.getStrippedSource,
    hasExports = _require.hasExports,
    isSupportedFile = _require.isSupportedFile,
    makeExportsString = _require.makeExportsString,
    makeProcessExports = _require.makeProcessExports,
    parseExportsToObject = _require.parseExportsToObject;

module.exports = {
  process: function process(source, filename) {
    var result;

    if (isSupportedFile(filename)) {
      // strip comments
      var strippedSource = getStrippedSource(source); // check if the scss file contents include an ":export {}" block

      if (hasExports(strippedSource)) {
        // a string of all exported values
        var exported = getExported(strippedSource); // create an array of each exported key-value pair

        var lines = getLines(exported); // create an object from the scss variable literals to be re-exported

        result = parseExportsToObject(lines);
      }
    } // generate the module.exports string


    var exportString = makeExportsString(result); // return the process export

    return makeProcessExports(exportString);
  },
  getCacheKey: function getCacheKey() {
    return _getCacheKey();
  }
};