"use strict";

var fs = require('fs');

var path = require('path');

var jest = require('jest');

var sinon = require('sinon');

var transformer = require('./index');

var basicFile = '../test/basic.scss';
var commentsFile = '../test/comments.scss';
var formattingFile = '../test/formatting.scss';
var noExportsFile = '../test/none.scss';
var incorrectExtFile = '../test/filename.css';
var contentsBasic = fs.readFileSync(path.resolve(__dirname, basicFile), 'utf8');
var contentsComments = fs.readFileSync(path.resolve(__dirname, commentsFile), 'utf8');
var contentsFormatting = fs.readFileSync(path.resolve(__dirname, formattingFile), 'utf8');
var contentsNoExports = fs.readFileSync(path.resolve(__dirname, noExportsFile), 'utf8');
var contentsIncorrectExt = fs.readFileSync(path.resolve(__dirname, incorrectExtFile), 'utf8');
var expectedParsed = 'module.exports = {"error":"$errorColor","success":"$successColor","warning":"$warningColor"};';
var emptyModuleString = 'module.exports = {};';
describe('jest-scss-transform', function () {
  describe('transformer.process', function () {
    beforeEach(function () {
      sinon.restore();
    });
    it('returns empty module for file extensions other than .scss', function () {
      expect(transformer.process(contentsIncorrectExt, incorrectExtFile)).toBe(emptyModuleString);
    });
    it('returns empty module for files with no exports', function () {
      expect(transformer.process(contentsNoExports, noExportsFile)).toBe(emptyModuleString);
    });
    it('processes files with basic formatting', function () {
      expect(transformer.process(contentsBasic, basicFile)).toBe(expectedParsed);
    });
    it('processes files with commented exports', function () {
      expect(transformer.process(contentsComments, commentsFile)).toBe(expectedParsed);
    });
    it('processes files with poorly formatted exports', function () {
      expect(transformer.process(contentsFormatting, formattingFile)).toBe(expectedParsed);
    });
    it.each(['27.0.0', '27.5.2', '28.0.0', '28.0.1'])('returns object with code property for jest versions %s and above', function (jestVersion) {
      sinon.stub(jest, 'getVersion').returns(jestVersion);
      expect(transformer.process(contentsBasic, commentsFile)).toEqual({
        code: expectedParsed
      });
    });
  });
  describe('transformer.getCacheKey', function () {
    it('returns the expected cache key', function () {
      var fsStub = sinon.stub(fs, 'readFileSync').returns('test contents');
      var result = transformer.getCacheKey();
      fsStub.restore();
      expect(result).toBe('df14e44b311152c34358a675ae34afe0');
    });
  });
});