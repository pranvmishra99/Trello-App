"use strict";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

/**
 * helpers.js
 * @fileOverview Utility functions used by jest-scss-transform.
 */
var fs = require('fs');

var crypto = require('crypto'); // eslint-disable-next-line import/no-extraneous-dependencies


var jest = require('jest');

var exportStartRegex = /\n:export.{\n*/;
var exportEndRegex = /\n*}/;
var commentsMatcher = /(\/\*([\s\S]*?)\*\/)|(\/\/(.*)$)/gm;
var endOfLineMatcher = /;/g;
var scssFileExtMatcher = /.scss$/;
var sepStr = ':';
var emptyStr = '';

module.exports.getExported = function (str) {
  return str.split(exportStartRegex)[1].split(exportEndRegex)[0];
};

module.exports.getStrippedSource = function (str) {
  return str.replace(commentsMatcher, emptyStr).trim();
};

module.exports.hasExports = function (str) {
  return exportStartRegex.test(str);
};

module.exports.isSupportedFile = function (filename) {
  return scssFileExtMatcher.test(filename);
};

module.exports.makeExportsString = function () {
  var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return "module.exports = ".concat(JSON.stringify(obj), ";");
};

module.exports.getLines = function (str) {
  return str.split(endOfLineMatcher).map(function (line) {
    return line.trim();
  }).filter(function (line) {
    return !!line.length;
  });
};

module.exports.parseExportsToObject = function (lines) {
  return lines.reduce(function (obj, line) {
    var _line$split = line.split(sepStr),
        _line$split2 = _slicedToArray(_line$split, 2),
        name = _line$split2[0],
        value = _line$split2[1];

    return _objectSpread(_objectSpread({}, obj), {}, _defineProperty({}, name.trim(), value.trim().replace(endOfLineMatcher, emptyStr)));
  }, {});
};

module.exports.getCacheKey = function () {
  return crypto.createHash('md5').update(fs.readFileSync(__filename)).digest('hex');
};

module.exports.makeProcessExports = function (exportString) {
  // jest.getVersion() returns semantic version, like X.Y.Z
  // We are only interested in the major version (the "X") in this case.
  var _jest$getVersion$spli = jest.getVersion().split('.'),
      _jest$getVersion$spli2 = _slicedToArray(_jest$getVersion$spli, 1),
      major = _jest$getVersion$spli2[0];

  var majorInt = parseInt(major, 10);

  if (majorInt < 27) {
    // For jest versions 26.x.x and bellow, we are fine with just returning
    // the exports as a string
    return exportString;
  } // For jest version 27.x.x and above, we want to return an object with a
  // "code" property, which contains an export string (see here: https://jestjs.io/docs/code-transformation)


  return {
    code: exportString
  };
};